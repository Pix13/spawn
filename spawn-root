#!/bin/sh

program_name="spawn-root"

root_user="user"

xauth_file="/tmp/xauth"
x11_unix_dir="/tmp/.X11-unix"
pulseaudio_dir="/run/pulse"

S=$(printf '\t')

try_source() { [ -f "$1" ] && . "$1" || :; }

die() {
    local status=$?
    [ $status = 0 ] && status=2
    [ $# = 0 ] || echo Error: $*
    exit $status
}

show_help() {
    cat <<EOF
Usage: spawn-root -d <path> [OPTIONS] -- [COMMAND]

  Spawns new container or chroot and configures shared environment.

OPTIONS:

  -h|--help         Print this help message
  -d|--directory    A directory to use as a root filesystem
  -r|--as-root      Use superuser inside the spawned root
  --arch            Set architecture reported by uname(2)
  --bind-home       Bind mount current user home directory inside the chroot
  --with-ssh-agent  Pass SSH_AUTH_SOCK variable and bind the socket
  --with-x11        Pass DISPLAY, XAUTHORITY and bind $x11_unix_dir
  --with-pulseaudio Set PULSE_SERVER and pass Pulseaudio socket
  --umount          Just unmount directories for the specified root name
  --nspawn          Use systemd-nspawn instead of chroot call

SYNOPSIS:

  To run custom command inside the chroot pass it after --.

EOF
}

su_run() {
    if [ "$UID" = "0" ]; then
        "$@"
    else
        sudo "$@"
    fi
}

mount_filesystems() {
    local ssh_sock_dir

    : ${root_dir:?}

    su_run mkdir -p "$root_dir/proc"           || die
    su_run mount -t proc proc "$root_dir/proc" || die

    su_run mkdir -p "$root_dir/sys"            || die
    su_run mount --rbind /sys "$root_dir/sys"  || die
    su_run mount --make-rslave "$root_dir/sys" || die

    su_run mkdir -p "$root_dir/dev"            || die
    su_run mount --rbind /dev "$root_dir/dev"  || die
    su_run mount --make-rslave "$root_dir/dev" || die

    if [ "$bind_home" ]; then
        su_run mount --bind "$HOME" "$root_dir/$root_home"
    fi

    if [ "$with_ssh_agent" ]; then
        ssh_sock_dir=$(dirname "$SSH_AUTH_SOCK")
        su_run mkdir -p "$root_dir/$ssh_sock_dir" || die
        su_run mount --bind "$ssh_sock_dir" "$root_dir/$ssh_sock_dir" || die
    fi

    if [ "$with_x11" ]; then
        su_run mkdir -p "$root_dir/$x11_unix_dir" || die
        su_run mount --bind "$x11_unix_dir" "$root_dir/$x11_unix_dir" || die
    fi

    if [ "$with_pulseaudio" ]; then
        su_run mkdir -p "$root_dir/$pulseaudio_dir" || die
        su_run mount --bind /run/user/$UID/pulse "$root_dir/$pulseaudio_dir" || die
    fi
}

unmount_filesystems() {
    : ${root_dir:?}

    local root=$(realpath "$root_dir")

    for mp in $(awk -v i="$root" '$2~i {print $2}' /proc/mounts | tac)
    do
        su_run umount "$mp" || true
    done
}

spawn_root_chroot() {
    local setarch userspec

    : ${root_dir:?}
    : ${root_user:?}
    : ${root_home:?}

    if [ "$root_user" = 'root' ]; then
        userspec="0:0"
    else
        userspec="$USER:users"
    fi

    if [ "$root_arch" = 'x86' ]; then
        setarch='linux32'
    else
        setarch='linux64'
    fi

    su_run "$setarch" env - HOME="$root_home" TERM="$TERM" \
        ${with_ssh_agent:+SSH_AUTH_SOCK="$SSH_AUTH_SOCK"} \
        chroot --userspec="$userspec" "$root_dir" \
        ${root_command:-/bin/bash --login}
}

spawn_root_systemd() {
    local IFS=$(printf '\n\t')
    local personality=
    local args=

    : ${root_dir:?}
    : ${root_user:?}

    if [ "$with_ssh_agent" ]; then
        args="${args}${S}--setenv=SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
        args="${args}${S}--bind=$SSH_AUTH_SOCK"
    fi

    if [ "$with_x11" ]; then
        args="${args}${S}--setenv=DISPLAY=$DISPLAY"
        args="${args}${S}--setenv=XAUTHORITY=$xauth_file"
        args="${args}${S}--setenv=QT_X11_NO_MITSHM=1"
        args="${args}${S}--bind=$x11_unix_dir"
    fi

    if [ "$with_system_bus" ]; then
        args="${args}${S}--bind=/run/dbus"
    fi

    if [ "$with_pulseaudio" ]; then
        args="${args}${S}--setenv=PULSE_SERVER=$pulseaudio_dir/native"
        args="${args}${S}--bind=/run/user/$UID/pulse:$pulseaudio_dir"
    fi

    case $root_arch in
        x86|i?86)
            personality="x86" ;;
        x86-64|amd64)
            personality="x86-64" ;;
    esac

    su_run systemd-nspawn \
        --directory="$root_dir" \
        --user="$root_user" \
        ${personality:+--personality="$personality"} \
        $args $root_command
}

if [ "$XDG_CONFIG_HOME" ]; then
    try_source "$XDG_CONFIG_HOME/$program_name/env"
else
    try_source "$HOME/.config/$program_name/env"
fi

if [ $# = 0 ]; then
    show_help
    exit
fi

root_command=

while [ $# -gt 0 ]; do
    if [ "$arg_flag" ]; then
        root_command="${root_command}${S}$1"
    else
        case $1 in
            --)
                arg_flag=1 ;;
            -h|--help) show_help; exit ;;
            -d|--directory)
                root_dir="$2"; shift ;;
            -r|--as-root)
                root_user='root' ;;
            --arch)
                root_arch="$2"; shift ;;
            --bind-home)
                bind_home=1 ;;
            --with-ssh-agent)
                with_ssh_agent=1 ;;
            --with-x11)
                with_x11=1 ;;
            --with-system-bus)
                with_system_bus=1 ;;
            --with-pulseaudio)
                with_pulseaudio=1 ;;
            --umount)
                umount_only=1 ;;
            --nspawn)
                nspawn=1 ;;
            *)
                die "unknown argument: $1" ;;
        esac
    fi
    shift
done

if [ -z "$root_dir" ]; then
    die "root directory was not specified"
fi

if [ ! -d "$root_dir" ]; then
    die "root directory '$root_dir' is not exists"
fi

if [ -z "$nspawn" ]; then
    [ "$(command -v dirname)" ] ||
        die "dirname command was not found"
    [ "$(command -v realpath)" ] ||
        die "realpath command was not found"
    [ "$(command -v awk)" ] ||
        die "awk command was not found"
    [ "$(command -v tac)" ] ||
        die "tac command was not found"
fi

if [ "$root_user" = 'root' ]; then
    root_home="/root"
else
    root_home="/home/$root_user"
fi

if [ "$umount_only" ]; then
    unmount_filesystems
    exit
fi

if [ "$with_ssh_agent" ]; then
    [ "$SSH_AUTH_SOCK" ] ||
        die "SSH_AUTH_SOCK is not set"
    [ -e "$SSH_AUTH_SOCK" ] ||
        die "$SSH_AUTH_SOCK is not exists"
fi

if [ "$with_x11" ]; then
    [ "$DISPLAY" ] ||
        die "DISPLAY is not set"

    xauth extract "$root_dir/$xauth_file" "$DISPLAY" ||
        die "failed to extract X authorization entries"
fi

if [ "$with_pulseaudio" ]; then
    [ -d "/run/user/$UID/pulse" ] ||
        die "Pulseaudio runtime directory is not exists"

    mkdir -p "$root_dir/$root_home/.config/pulse"
    cp -f "$HOME/.config/pulse/cookie" \
        "$root_dir/$root_home/.config/pulse/cookie"
fi

if [ ! -h "$root_dir/etc/mtab" ]; then
    su_run ln -sf /proc/self/mounts "$root_dir/etc/mtab" ||
        die "failed to link mtab"
fi

su_run cp -L /etc/resolv.conf "$root_dir/etc/resolv.conf" ||
    die "failed to copy resolv.conf"

if [ "$nspawn" ]; then
    spawn_root_systemd
else
    trap unmount_filesystems EXIT
    mount_filesystems
    spawn_root_chroot
fi
