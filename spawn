#!/bin/sh

set -eu

program_name="spawn"

S=$(printf '\t')
E=

xsock_dir='/tmp/.X11-unix'
mountpoints=

# saving the stderr to allow showing error messages from subshells
exec 3>&2

show_usage() {
    cat <<EOF
Usage: $program_name [OPTIONS...] <name|directory> [--] [COMMAND [ARGS...]]

  -h                    Show usage information
  --help                Show full help
  -r|--as-root          Use superuser inside the spawned root
  -n|--dry-run          Do not run any privileged commands - only print them
  --user <name>         Assume <name> user inside the container
  --arch <arch>         Set architecture reported by uname(2)
  --bind-home <dir>     Bind the specified directory as a user's home directory
  --bind-dir <dir>      Mount the specified directory inside the root
  --with-ssh-agent      Pass SSH_AUTH_SOCK variable and bind the socket
  --with-x11            Pass DISPLAY, XAUTHORITY and bind $xsock_dir
  --with-pulseaudio     Set PULSE_SERVER and pass Pulseaudio socket
  --to-stderr           Redirect all container command output to stderr
  --share-devices       Share devices with the host
  --using-docker        Use Docker to spawn the named container
  --using-nspawn        Use 'systemd-nspawn' to chroot
  --using-chroot        Use the regular 'chroot'
  --unlock              Remove the lock file
  --cleanup             Release stale mount points and unlock

EOF
}

show_help() {
    cat <<EOF
Usage: $program_name [OPTIONS...] <name|directory> [--] [COMMAND [ARGS...]]

  Spawns a new container or chroot and configures a shared environment.

OPTIONS:

  -h                    Show usage information
  --help                Show full help
  -r|--as-root          Use superuser inside the spawned root
  -n|--dry-run          Do not run any privileged commands - only print them
  --user <name>         Assume <name> user inside the container
  --arch <arch>         Set architecture reported by uname(2)
  --bind-home <dir>     Bind the specified directory as a user's home directory
  --bind-dir <dir>      Mount the specified directory inside the root
  --with-ssh-agent      Pass SSH_AUTH_SOCK variable and bind the socket
  --with-x11            Pass DISPLAY, XAUTHORITY and bind $xsock_dir
  --with-pulseaudio     Set PULSE_SERVER and pass Pulseaudio socket
  --to-stderr           Redirect all container command output to stderr
  --share-devices       Share devices with the host
  --using-docker        Use Docker to spawn the named container
  --using-nspawn        Use 'systemd-nspawn' to chroot
  --using-chroot        Use the regular 'chroot'
  --unlock              Remove the lock file
  --cleanup             Release stale mount points and unlock

SYNOPSIS:

  Unknown options before <name|directory> are passed to the selected launcher
  as arguments (docker run, chroot, etc.). Everything else after
  <name|directory> and optional '--' is considered the command to be invoked
  inside the spawned container or chroot. If you want to pass an argument
  requiring a value use the --name=value form (without whitespace).

  If no '--using-*' option was given and the first non-option argument is an
  existing directory then 'nspawn' will be used if 'systemd-nspawn' was found
  in PATH, otherwise 'chroot'. If the argument is not a directory it is assumed
  to be the name of a Docker container.

  If neither the '--as-root' nor the '--user' option is specified a user inside
  the spawned environment is assumed to be 'dev'.

  Use the '--bind-home' option to mount the specified directory as a user's home
  directory inside the chroot. For example, if you run:

      spawn --bind-home $HOME/somedir root

  The directory '$HOME/somedir' will become '/home/dev' inside the spawned
  chroot (assuming the default 'dev' user is not overridden). Use this to have a
  separate clean profile and settings from the host or to share the same home
  directory between different chrooted environments.

  Use the '--bind-dir' option to mount the specified directory inside the chroot
  at the same path as outside. Run build commands relative to this directory to
  have compile_commands.json generated with the absolute paths directly usable
  by editor and language servers outside of the chrooted environment. After
  spawning the chroot it will be the current working directory and also
  available as '\$WD' in the environment. It can be the same directory which is
  specified for '--bind-home'.

  Use the '--unlock' option to remove stale lock files from the root directory
  after an unexpected system shutdown, for example.

  The '--cleanup' option can be used to unmount the directories left by other
  spawn invocations.

  If either '--unlock' or '--cleanup' is specified all other options are
  ignored, the script exits immediately after the cleanup.

NOTE:

  If you get "Connection failure: Protocol error" error or silent audio when
  trying to run PulseAudio applications inside the chroot, you need to disable
  communication through shared memory for the client. Add:

    enable-shm = no

  to "/etc/pulse/client.conf" inside the root directory.

EOF
}

parse_command_line() {
    local name= args= eoa=

    while [ $# -gt 0 ]; do
        case $1 in
            --) eoa=1; shift; break ;;
            -h) show_usage; exit ;;
            --help) show_help; exit ;;
            -r|--as-root)
                spawn_user='root' ;;
            -n|--dry-run) E=echo ;;
            -u|--user)
                spawn_user="$2"; shift ;;
            --arch)
                spawn_arch="$2"; shift ;;
            --bind-home)
                bind_home="$2"; shift ;;
            --bind-dir)
                bind_dir_arg="$2"; shift ;;
            --with-ssh-agent)
                with_ssh_agent=1 ;;
            --with-x11)
                with_x11=1 ;;
            --with-pulseaudio)
                with_pulseaudio=1 ;;
            --to-stderr)
                to_stderr=1 ;;
            --share-devices)
                share_devices=1 ;;
            --using-docker)
                spawn_type='docker' ;;
            --using-nspawn)
                spawn_type='nspawn' ;;
            --using-chroot)
                spawn_type='chroot' ;;
            --unlock)
                do_unlock=1 ;;
            --cleanup)
                do_cleanup=1 ;;
            -*)
                spawn_args="${spawn_args-}${S}${1}" ;;
            *)
                name="$1"; shift; break ;;
        esac
        shift
    done

    if [ "$eoa" ]; then
        while [ $# -gt 0 ]; do
            case $1 in
                -*)
                    spawn_args="${spawn_args-}${S}${1}"
                    ;;
                 *) [ "$name" ] || name="$1"
                    spawn_args="${spawn_args-}${S}${1}"
                    ;;
            esac
            shift
        done
    else
        while [ $# -gt 0 ]; do
            case $1 in
                --) eoa=1; shift; break ;;
                *) args="${args}${S}${1}" ;;
            esac
            shift
        done

        while [ $# -gt 0 ]; do
            spawn_command="${spawn_command-}${S}${1}"
            shift
        done

        if [ "$eoa" ]; then
            spawn_args="${spawn_args-}${S}${args#$S}"
        else
            spawn_command="${spawn_command-}${S}${args#$S}"
        fi
    fi

    case ${spawn_type-} in
        chroot|nspawn)
            root_dir="$name" ;;
        docker)
            spawn_name="$name" ;;
        '')
            if [ -d "$name" ]; then
                if [ "$(command -v systemd-nspawn)" ]; then
                    spawn_type="nspawn"
                else
                    spawn_type="chroot"
                fi
                root_dir="$name"
            else
                spawn_type="docker"
                spawn_name="$name"
            fi ;;
    esac

    spawn_args=${spawn_args+${spawn_args#$S}}
    spawn_command=${spawn_command+${spawn_command#$S}}
}

validate_environment() {
    case ${spawn_type-} in
        chroot|nspawn)
            [ "${root_dir-}" ] ||
                die "root directory is not specified"
            [ -d "$root_dir" ] ||
                die "the specified root directory '$root_dir' is not exists"
            [ -f "$root_dir/etc/passwd" ] ||
                die "/etc/passwd is not exists in '$root_dir'"
            ;;
        docker)
            [ "$(command -v docker)" ] ||
                die "docker command was not found"
            [ "${spawn_name-}" ] ||
                die "container name is not specified"
            if [ -z "${spawn_args-}" ]; then
                docker_image_exists "$spawn_name" ||
                    die "the specified container image '$spawn_name' does not exist"
            fi
    esac

    case $spawn_type in
        nspawn)
            [ "$(command -v systemd-nspawn)" ] ||
                die "systemd-nspawn command was not found"
            ;;
        chroot)
            [ "$(command -v dirname)" ] ||
                die "dirname command was not found"
            [ "$(command -v realpath)" ] ||
                die "realpath command was not found"
            [ "$(command -v awk)" ] ||
                die "awk command was not found"
            [ "$(command -v tac)" ] ||
                die "tac command was not found"
            [ "$(command -v unshare)" ] ||
                die "unshare command was not found"

            chroot=$(command -v chroot)
            if [ -z "$chroot" ]; then
                chroot="/usr/sbin/chroot"
            fi
            if ! [ -x "$chroot" ]; then
                die "chroot command was not found"
            fi

            ;;
    esac

    case $spawn_type in
        nspawn)
            if [ "${share_devices-}" ]; then
                die "the '--share-devices' option is not supported for nspawn"
            fi ;;
    esac
}

die() {
    local sts=$?
    [ $sts = 0 ] && sts=2
    [ $# = 0 ] || echo $program_name error: $* >&3
    exit $sts
}

warn() {
    echo "Warning: $*"
}

su_run() {
    if [ "${euid:?}" = "0" ]; then
        $E "$@"
    else
        $E sudo "$@"
    fi
}

is_number() {
    case $1 in
        ''|*[!0-9]*) return 1 ;;
        *) return 0 ;;
    esac
}

escape_quote() {
    local arg= result=
    for arg; do
        arg=$(printf "%s" "$arg" | sed "s/'/'\\\''/g")
        result="$result${S}$arg"
    done
    result=${result#${S}}
    printf '%s' "$result"
}

docker_image_exists() {
    [ "$(command -v docker)" ] || return
    # it seems like the image name could be basically anything, some scripts
    # create images which look like hostnames, so any heuristic here is futile
    docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${1}"
}

find_user_info() {
    local field="$1" user_arg="${2-}" group_arg="${3-}"
    if [ "${root_dir-}" ]; then
        [ -f "$root_dir/etc/passwd" ] || return
        while IFS=: read -r user pass uid gid gecos home shell; do
            if is_number "$user_arg" && [ "$uid" = "$user_arg" ] ||
                    [ "$user" = "$user_arg" ]; then
                eval "echo \$$field"
                break
            fi
        done < "$root_dir/etc/passwd"
    else
        case $user_arg in
            0|root)
                case $field in
                    user) echo root ;;
                     uid) echo 0 ;;
                     gid) echo ${group_arg:-0} ;;
                    home) echo /root ;;
                esac ;;
            *)
                if is_number "$user_arg"; then
                    case $field in
                        uid) echo $user_arg ;;
                        gid) echo $group_arg ;;
                    esac
                else
                    case $field in
                        user) echo $user_arg ;;
                         uid) echo $euid ;;
                         gid) echo ${group_arg-$(id -g)} ;;
                        home) echo /home/$user_arg ;;
                    esac
                fi ;;
        esac
    fi
}

get_my_config_dir() {
    echo "${XDG_CONFIG_HOME:-${HOME:?}/.config}${1:+/$1}"
}

get_config_dir() {
    local home_dir="$spawn_home" config_dir=
    if [ "$home_dir" ]; then
        config_dir="${home_dir:?}/.config"
        echo "$config_dir${1:+/$1}"
    fi
}

get_runtime_dir() {
    echo "${XDG_RUNTIME_DIR:-/run/user/${euid}}"
}

get_pa_socket() {
    if [ "$(command -v pactl)" ]; then
        pactl info 2>/dev/null | \
            awk '/Server String: / { print $3 }' | \
            sed 's/^unix://'
    fi
}

get_command() {
    local IFS="$S" cd_cmd=cd
    if [ "${bind_dir_arg-}" ]; then
        cd_cmd="cd \"$(escape_quote "$bind_dir_arg")\""
    fi
    if [ -z "${spawn_command-}" ]; then
        spawn_command="exec${S}/bin/bash${S}-l"
    fi
    cat <<EOF
/bin/sh -c 'IFS=$(printf \"\\t\"); cmd="$(escape_quote "$spawn_command")"; $cd_cmd && \$cmd'
EOF
}

root_mkdir() {
    local uid="$spawn_user_uid" gid="$spawn_user_gid"
    su_run install -o "${uid:?}" -g "${gid:?}" ${2:+"-m$2"} -d "${root_dir:?}${1:?}"
}

add_mountpoints() {
    for arg; do
        mountpoints="${arg}${S}${mountpoints}"
    done
}

bind_mount() {
    su_run mount --bind "${1:?}" "${2:?}"
    add_mountpoints "$2"
}

bind_file() {
    su_run touch "${2:?}"
    bind_mount "$1" "$2"
}

bind_dir() {
    su_run mkdir -p "$2"
    bind_mount "$1" "$2"
}

try_umount() {
    local path="${1:?}" arg="${2-}"
    if su_run mountpoint -q "$path"; then
        su_run umount $arg "$path" || true
    fi
}

get_lock_filename() {
    local dir="$(dirname "${1:?}")" name="$(basename "${1:?}")"
    echo "${dir:?}/.${program_name:?}.${name:?}.lock"
    # the scheme used by systemd-nspawn
    # echo "${dir}/.#${name}.lck"
}

is_locked() {
    test -f "$(get_lock_filename "${1:?}")"
}

lock_dir() {
    su_run touch "$(get_lock_filename "${1:?}")"
}

unlock_dir() {
    su_run rm -f "$(get_lock_filename "${1:?}")"
}

add_user_arg() {
    local _A=

    [ "${spawn_user-}" ] || return 0

    case $spawn_type in
        nspawn|docker)
            _A="--user=$spawn_user" ;;
    esac

    eval "${1}=\"\$${1}$S$_A\""
}

make_setarch() {
    case ${spawn_arch-} in
        x86|i?86)
            echo "linux32" ;;
        x86-64|x86_64|amd64)
            echo "linux64" ;;
        '') ;;
         *) die "unknown arch '$spawn_arch'" ;;
    esac
}

make_env_arg() {
    local value="$1"
    case $spawn_type in
        chroot) echo "$value" ;;
        nspawn) echo "--setenv=$value" ;;
        docker) echo "--env=$value" ;;
    esac
}

make_bind_arg() {
    local value="$1"
    case $spawn_type in
        nspawn) echo "--bind=$value" ;;
        docker) echo "--volume=$value" ;;
    esac
}

setup_runtime_env() {
    local _A= uid= gid= config_dir=

    [ -z "${with_ssh_agent-}"  ] &&
    [ -z "${with_x11-}"        ] &&
    [ -z "${with_pulseaudio-}" ] &&
        return 0

    runtime_dir=$(get_runtime_dir)
    my_runtime_dir=$(mktemp -dp "$runtime_dir" spawn.XXXXXXXXXX)

    case $spawn_type in
        chroot)
            _A="$_A$S$(make_env_arg TERM=${TERM-})"
            if [ "${spawn_home-}" ]; then
                _A="$_A$S$(make_env_arg HOME=$spawn_home)"
            fi
            _A="$_A$S$(make_env_arg USER=$spawn_user)"
            _A="$_A$S$(make_env_arg LOGNAME=$spawn_user)"

            if [ "$spawn_user" = "root" ]; then
                _A="$_A$S$(make_env_arg PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin)"
            else
                _A="$_A$S$(make_env_arg PATH=/usr/local/bin:/usr/bin:/bin)"
            fi

            root_mkdir "$runtime_dir"
            ;;
        *)
            _A="$_A$S$(make_bind_arg $my_runtime_dir:$runtime_dir)"
            ;;

    esac

    _A="$_A$S$(make_env_arg "XDG_RUNTIME_DIR=$runtime_dir")"

    # temporary disabling to allow u be a number
    # config_dir=$(get_config_dir)
    # if [ "$config_dir" ]; then
    #     _A="$_A$S$(make_env_arg "XDG_CONFIG_HOME=$config_dir")"
    #     if [ "${root_dir-}" ]; then
    #         root_mkdir "$config_dir"
    #     fi
    # fi

    eval "${1}=\"\$${1}$S$_A\""
}

setup_system_env() {
    local SYS_A=

    case $spawn_type in
        chroot)
            bind_file "/etc/resolv.conf" "$root_dir/etc/resolv.conf"
            ;;
        nspawn)
            SYS_A="$SYS_A$S$(make_bind_arg "/etc/resolv.conf:/etc/resolv.conf")"
            ;;
    esac

    if [ -f /etc/localtime ]; then
        case $spawn_type in
            chroot)
                bind_file "/etc/localtime" "$root_dir/etc/localtime"
                ;;
            nspawn)
                SYS_A="$SYS_A$S$(make_bind_arg "/etc/localtime:/etc/localtime")"
                ;;
        esac
    fi

    eval "${1}=\"\$${1}$S$SYS_A\""
}

setup_ssh_env() {
    local SSH_A= uid=

    [ "${with_ssh_agent-}" ] || return 0

    [ "${SSH_AUTH_SOCK-}" ] ||
        die "passing of SSH agent is enabled but SSH_AUTH_SOCK is not set"
    [ -S "$SSH_AUTH_SOCK" ] ||
        die "$SSH_AUTH_SOCK socket is not exists or is not a socket"

    uid=$spawn_user_uid

    SSH_A="$SSH_A$S$(make_env_arg "SSH_AUTH_SOCK=$runtime_dir/ssh")"

    case $spawn_type in
        chroot)
            bind_file "$SSH_AUTH_SOCK" "$my_runtime_dir/ssh"
            ;;
        *)
            SSH_A="$SSH_A$S$(make_bind_arg "$SSH_AUTH_SOCK:$runtime_dir/ssh")"
            ;;
    esac

    if [ "${euid:?}" != "$uid" ]; then
        warn "the current effective user ID ($euid) does not match the user \
ID inside the container ($uid) but SSH agent socket sharing is requested -- \
changing $SSH_AUTH_SOCK mode to world writeable/readable (666)"
        chmod 666 "$SSH_AUTH_SOCK"
    fi

    eval "${1}=\"\$${1}$S$SSH_A\""
}

setup_x11_env() {
    local X11_A= xauth_file=

    [ "${with_x11-}" ] || return 0

    [ "${DISPLAY-}" ] ||
        die "passing of X11 environment is enabled but DISPLAY is not set"
    [ -d "$xsock_dir" ] ||
        die "X11 socket directory '$xsock_dir' is not exists"

    xauth_file="$my_runtime_dir/Xauthority"
    touch "$xauth_file"
    extract_xauth "$xauth_file"
    chmod 666 "$xauth_file"

    X11_A="$X11_A$S$(make_env_arg "DISPLAY=$DISPLAY")"
    X11_A="$X11_A$S$(make_env_arg "XAUTHORITY=$runtime_dir/Xauthority")"

    # disable Qt's usage of shared memory which we do not expose
    X11_A="$X11_A$S$(make_env_arg QT_X11_NO_MITSHM=1)"

    # Exposing whole X11 socket directory is probably a bad idea, hopefully
    # assuming that most users are running single X11 instance.

    case $spawn_type in
        chroot)
            bind_dir "$xsock_dir" "$root_dir$xsock_dir"
            ;;
        *)
            X11_A="$X11_A$S$(make_bind_arg "$xsock_dir:$xsock_dir")"
            ;;
    esac

    eval "${1}=\"\$${1}$S$X11_A\""
}

setup_pa_env() {
    local PA_A= sock_file= cookie_file=

    [ "${with_pulseaudio-}" ] || return 0

    sock_file=$(get_pa_socket)

    [ "$sock_file" ] ||
        die "passing of PulseAudio is enabled but the socket could not be found"
    [ -S "$sock_file" ] ||
        die "PulseAudio socket '$sock_file' is not exists or is not a socket"

    cookie_file=$(get_my_config_dir pulse)/cookie
    [ -f "$cookie_file" ] ||
        die "PulseAudio cookie file '$cookie_file' is not found"
    cp "$cookie_file" "$my_runtime_dir/pulse_cookie"
    chmod 666 "$my_runtime_dir/pulse_cookie"

    PA_A="$PA_A$S$(make_env_arg "PULSE_SERVER=$runtime_dir/pulse_sock")"
    PA_A="$PA_A$S$(make_env_arg "PULSE_COOKIE=$runtime_dir/pulse_cookie")"

    case $spawn_type in
        chroot)
            bind_file "$sock_file" "$my_runtime_dir/pulse_sock"
            ;;
        *)
            PA_A="$PA_A$S$(make_bind_arg "$sock_file:$runtime_dir/pulse_sock")"
            ;;
    esac

    eval "${1}=\"\$${1}$S$PA_A\""
}

setup_home_env() {
    local HOME_A= src= dest=

    [ "${bind_home-}"  ] || return 0

    src=${bind_home%:*}
    if [ "$src" != "$bind_home" ]; then
        dest=${bind_home#*:}
    fi
    : ${dest:=$spawn_home}

    [ -d "$src" ] ||
        die "the source directory to bind home does not exist: $src"
    if [ -z "$dest" ]; then
        if [ "$spawn_type" = "docker" ]; then
            die "could not find home directory to bind to: please specify a \
user existing inside the container by name"
        else
            die "failed to find home directory for user: $spawn_user"
        fi
    fi

    case $spawn_type in
        chroot)
            bind_dir "$src" "$root_dir$dest"
            ;;
        *)
            HOME_A="$HOME_A$S$(make_bind_arg "$src:$dest")"
            ;;
    esac

    eval "${1}=\"\$${1}$S$HOME_A\""
}

setup_bind_env() {
    local IFS oldIFS="$IFS" OUT_A="$1" BIND_A= from to

    [ "${bind_dir_arg-}" ] || return 0

    IFS=:
    set -- $bind_dir_arg
    IFS="$oldIFS"
    from="$1"
    if [ -z "${2-}" ]; then
        to="${from}"
    else
        to="$2"
    fi

    case $spawn_type in
        chroot)
            bind_dir "$from" "$root_dir$to"
            ;;
        *)
            BIND_A="$BIND_A$S$(make_bind_arg "$bind_dir_arg:$bind_dir_arg")"
            ;;
    esac

    BIND_A="$BIND_A$S$(make_env_arg "WD=$bind_dir_arg")"

    eval "${OUT_A}=\"\$${OUT_A}$S$BIND_A\""
}

setup_env() {
    add_user_arg      "$1"
    setup_runtime_env "$1"
    setup_system_env  "$1"
    setup_ssh_env     "$1"
    setup_x11_env     "$1"
    setup_pa_env      "$1"
    setup_home_env    "$1"
    setup_bind_env    "$1"
}

extract_xauth() {
    # Use wildcard authentication family because hostname of container can
    # differ from the host and default Xauthority files are hostname specific.
    # See http://stackoverflow.com/a/25280523 for details.
    xauth nlist "$DISPLAY" | sed 's/^..../ffff/' | xauth -f "$1" nmerge -
}

unlock() {
    if [ "${root_dir-}" ]; then
        unlock_dir "$root_dir"
        sync
    fi
}

umount_all() {
    if [ "${root_dir-}" ]; then
        try_umount "$root_dir/sys" -R
        try_umount "$root_dir/dev" -R
        [ "${spawn_home-}" ] && try_umount "$root_dir$spawn_home"
        [ "${xsock_dir-}"  ] && try_umount "$root_dir$xsock_dir"
        try_umount "$root_dir/etc/localtime"
        try_umount "$root_dir/etc/resolv.conf"
    fi
    if [ "${my_runtime_dir-}" ]; then
        try_umount "$my_runtime_dir/pulse_sock"
        try_umount "$my_runtime_dir/ssh"
        rm -rf "$my_runtime_dir"
    fi
}

cleanup() {
    local IFS="$S"

    for path in $mountpoints; do
        su_run umount -R "$path" || true
    done
    if [ "${my_runtime_dir-}" ]; then
        rm -rf "$my_runtime_dir"
    fi

    unlock
}

spawn_root_chroot() {
    local IFS="$S" arch= userspec= env= cmd=

    trap cleanup EXIT

    arch=$(make_setarch)
    # TODO: fix this to handle GID
    userspec="--userspec=${spawn_user_name:-${spawn_user}}"

    setup_env env

    cmd=$(cat <<EOF
set -e
mount -t proc proc "$root_dir/proc"
EOF
)

    if [ "${share_devices-}" ]; then
        su_run mkdir -p "$root_dir/dev" "$root_dir/sys"
        su_run mount --rbind /dev "$root_dir/dev"
        su_run mount --make-rslave "$root_dir/dev"
        su_run mount --rbind /sys "$root_dir/sys"
        su_run mount --make-rslave "$root_dir/sys"
        add_mountpoints "$root_dir/dev" "$root_dir/sys"
    else
        cmd="$cmd; $(cat <<EOF
mount -t tmpfs -o nosuid tmpfs "$root_dir/dev"
mkdir -p "$root_dir/dev/shm" "$root_dir/dev/pts"
mount -t tmpfs -o nosuid,nodev shm "$root_dir/dev/shm"
mount -t devpts -o nosuid,noexec,gid=5,mode=620,ptmxmode=666,newinstance devpts "$root_dir/dev/pts"
ln -snf pts/ptmx "$root_dir/dev/ptmx"
ln -snf /proc/self/fd "$root_dir/dev/fd"
ln -snf /proc/self/fd/0 "$root_dir/dev/stdin"
ln -snf /proc/self/fd/1 "$root_dir/dev/stdout"
ln -snf /proc/self/fd/2 "$root_dir/dev/stderr"
mknod "$root_dir/dev/null" c 1 3
mknod "$root_dir/dev/zero" c 1 5
mknod "$root_dir/dev/random" c 1 8
mknod "$root_dir/dev/urandom" c 1 9
mknod "$root_dir/dev/console" c 5 1
mknod "$root_dir/dev/tty" c 5 0
chmod 666 "$root_dir/dev/null" "$root_dir/dev/zero" "$root_dir/dev/random" \
    "$root_dir/dev/urandom" "$root_dir/dev/tty"
chmod 600 "$root_dir/dev/console"
mount -t sysfs sysfs "$root_dir/sys"
EOF
)"
    fi

    cmd="$cmd; $(cat <<EOF
[ "${my_runtime_dir-}" ] && mount --rbind "${my_runtime_dir-}" "$root_dir${runtime_dir-}"
$chroot $userspec "$root_dir" $(get_command)
EOF
)"

    $E su_run $arch env - $env unshare -mpf /bin/sh -c "$cmd"
    cat <<EOF
$program_name warning: if you see the message below similar to:

    [1]+  Stopped                 spawn ...

you need to bring the script into the foreground using the 'fg' command and enter the password as requested to let the cleanup to finish. Alternatively, install systemd-nspawn or run spawn as root to avoid this problem.
EOF
}

spawn_root_nspawn() {
    local IFS="$S" A=

    trap cleanup EXIT

    # systemd-nspawn runs 'getent passwd <user>' inside the container to get
    # passwd entry for the user or fails with "Failed to resolve user <user>"

    setup_env A

    $E su_run systemd-nspawn $A ${spawn_args-} -D "$root_dir" -- /bin/sh -c "exec $(get_command)"
}

spawn_root_docker() {
    local IFS="$S" A= it_arg= cmd=

    trap cleanup EXIT

    setup_env A

    cmd=${spawn_command#%} cmd=${cmd#$S}

    if [ "${to_stderr-}" -a "$cmd" ]; then
        exec 1>&2
    fi
    [ "$cmd" ] || it_arg="-it"

    if [ "$spawn_command" != "$cmd" ]; then
        spawn_command=$cmd
        $E docker run --rm $it_arg ${share_devices:+--privileged} \
            $A ${spawn_args-} $spawn_name /bin/sh -c "exec $(get_command)"
    else
        $E docker run --rm $it_arg ${share_devices:+--privileged} \
            $A ${spawn_args-} $spawn_name $cmd
    fi
}

if [ $# = 0 ]; then
    show_usage
    exit
fi

euid=${UID:-$(id -u)}

parse_command_line "$@"
: ${spawn_user=$euid}
spawn_user_a=${spawn_user%:*}
if [ "$spawn_user" != "$spawn_user_a" ]; then
    spawn_user_b=${spawn_user#*:}
fi

spawn_user_name=$(find_user_info user "$spawn_user_a" "${spawn_user_b-}")
spawn_user_uid=$(find_user_info uid "$spawn_user_a" "${spawn_user_b-}")
spawn_user_gid=$(find_user_info gid "$spawn_user_a" "${spawn_user_b-}")
spawn_home=$(find_user_info home "$spawn_user_a" "${spawn_user_b-}")

unset spawn_user_a spawn_user_b

validate_environment

if [ "${do_unlock-}" ]; then
    unlock; exit
fi
if [ "${do_cleanup-}" ]; then
    umount_all; unlock; exit
fi

case $spawn_type in
    docker)
        spawn_root_docker
        ;;
    nspawn|chroot)
        if [ "${root_dir-}" ]; then
            if is_locked "$root_dir"; then
                die "the directory '$root_dir' is locked by another spawn instance, \
                    use '--cleanup' option to remove stale locks"
            fi
            lock_dir "$root_dir"

            if [ "$spawn_type" = 'nspawn' ]; then
                spawn_root_nspawn
            else
                spawn_root_chroot
            fi
        else
            die "chroot directory is not specified"
        fi ;;
esac
