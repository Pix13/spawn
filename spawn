#!/bin/sh

program_name="spawn"

S=$(printf '\t')

root_dir=
container_type=
container_name=
container_user="dev"
container_home="/home/$container_user"
container_command=
additional_args=

# keep this constant to be able to resume Docker containers
temp_dir="/var/tmp/${program_name}-$(id -u)"

xauth_file="$temp_dir/Xauthority"
xsock_dir='/tmp/.X11-unix'

pulseaudio_server_dir=$(dirname $(pactl info | awk 'BEGIN { FS=":" }; /Server String/ { print $3 }'))
pulseaudio_dir="/run/pulse"

show_usage() {
    cat <<EOF
Usage: $program_name [OPTIONS...] <name|directory> [--] [COMMAND [ARGS...]]

  Spawns new container or chroot and configures shared environment.

OPTIONS:

  -h|--help             Print this help message
  -r|--as-root          Use superuser inside the spawned root
  --arch <arch>         Set architecture reported by uname(2)
  --bind-home <dir>     Bind the specified directory as user home directory
  --with-ssh-agent      Pass SSH_AUTH_SOCK variable and bind the socket
  --with-x11            Pass DISPLAY, XAUTHORITY and bind $xsock_dir
  --with-pulseaudio     Set PULSE_SERVER and pass Pulseaudio socket
  --umount              Just unmount directories for the specified root name
  --using-docker        Run command in a new Docker container
  --using-chroot        Change the root directory using chroot

SYNOPSIS:

  Unknown options before <name|directory> are passed to the selected launcher
  as arguments (docker run, chroot, etc.). Everything else after
  <name|directory> and optional '--' are considered the command to be invoked
  inside the spawned container or chroot.

  Options starting with '--using' are mutually exclusive -- only the last one
  will have an effect. If none was given and the first non option argument
  specifies an existing directory then chroot will be assumed, otherwise the
  name will be passed to 'docker run'.

EOF
}

parse_command_line() {
    local parsing_command= eoa=

    while [ $# -gt 0 ]; do
        if [ "$parsing_command" ]; then
            # eat first '--' after non option argument
            if [ "$1" = '--' -a "$eoa" = "$#" ]; then
                eoa=
            else
                container_command="${container_command}${S}${1}"
            fi
        else
            case $1 in
                --)
                    parsing_command=1 ;;
                -h|--help) show_usage; exit ;;
                -r|--as-root)
                    container_user='root' ;;
                --arch)
                    root_arch="$2"; shift ;;
                --bind-home)
                    bind_home="$2"; shift ;;
                --with-ssh-agent)
                    with_ssh_agent=1 ;;
                --with-x11)
                    with_x11=1 ;;
                --with-pulseaudio)
                    with_pulseaudio=1 ;;
                --umount)
                    umount_only=1 ;;
                --share-system)
                    share_system=1 ;;
                --using-docker)
                    container_type='docker' ;;
                --using-chroot)
                    container_type='chroot' ;;
                -*)
                    additional_args="${additional_args}${S}$1" ;;
                *)
                    case $container_type in
                        docker) container_name="$1" ;;
                        chroot) root_dir="$1" ;;
                        *)
                            if [ -d "$1" ]; then
                                container_type='chroot'
                                root_dir="$1"
                            else
                                container_type='docker'
                                container_name="$1"
                            fi ;;
                    esac
                    parsing_command=1
                    eoa=$(($#-1))
                    ;;
            esac
        fi
        shift
    done
}

check_arguments() {
    case $container_type in
        docker)
            [ "$container_name" ] ||
                die "container name was not specified"
            ;;
        chroot)
            [ "$root_dir" ] ||
                die "root directory was not specified"
            [ -d "$root_dir" ] ||
                die "root directory '$root_dir' is not exists"
            [ "$(command -v dirname)" ] ||
                die "dirname command was not found"
            [ "$(command -v realpath)" ] ||
                die "realpath command was not found"
            [ "$(command -v awk)" ] ||
                die "awk command was not found"
            [ "$(command -v tac)" ] ||
                die "tac command was not found"
            ;;
        *)
            die "unsupported container type: $container_type"
            ;;
    esac

    if [ "$bind_home" ]; then
        [ -d "$bind_home" ] ||
            die "The directory '$bind_home' is not exists"
    fi

    if [ "$with_ssh_agent" ]; then
        [ "$SSH_AUTH_SOCK" ] ||
            die "SSH_AUTH_SOCK is not set"
        [ -e "$SSH_AUTH_SOCK" ] ||
            die "$SSH_AUTH_SOCK is not exists"
    fi
}

die() {
    local status=$?
    [ $status = 0 ] && status=2
    [ $# = 0 ] || echo Error: $*
    exit $status
}

su_run() {
    if [ "$UID" = "0" ]; then
        "$@"
    else
        sudo "$@"
    fi
}

try_source() { [ -f "$1" ] && . "$1" || :; }

load_config() {
    if [ "$XDG_CONFIG_HOME" ]; then
        try_source "$XDG_CONFIG_HOME/$program_name/env"
    else
        try_source "$HOME/.config/$program_name/env"
    fi
}

set_container_home() {
    if [ "$container_user" = 'root' ]; then
        container_home="/root"
    else
        container_home="/home/$container_user"
    fi
}

extract_xauth() {
    : ${DISPLAY:?}
    # This does not play well with restarting and reattaching docker
    # containers, so use global constant name for now.
    # xauth_file=$(mktemp)
    # Use wildcard authentication family because hostname of container can
    # differ from the host and default Xauthority files are hostname specific.
    # See http://stackoverflow.com/a/25280523 for details.
    xauth nlist "$DISPLAY" | sed 's/^..../ffff/' | xauth -f "$xauth_file" nmerge -
}

copy_pulseaudio_cookie() {
    : ${root_dir:?}
    : ${container_home:?}

    [ -d "/run/user/$UID/pulse" ] ||
        die "Pulseaudio runtime directory is not exists"

    mkdir -p "$root_dir/$container_home/.config/pulse"
    cp -f "$HOME/.config/pulse/cookie" \
        "$root_dir/$container_home/.config/pulse/cookie"
}

copy_resolv_conf() {
    : ${root_dir:?}

    su_run cp -L /etc/resolv.conf "$root_dir/etc/resolv.conf" ||
        die "failed to copy resolv.conf"
}

fix_mtab() {
    : ${root_dir:?}

    if [ ! -h "$root_dir/etc/mtab" ]; then
        su_run ln -sf /proc/self/mounts "$root_dir/etc/mtab" ||
            die "failed to link mtab"
    fi
}

unmount_filesystems() {
    : ${root_dir:?}
    local root
    root=$(realpath "$root_dir")

    for mp in $(awk -v i="$root" '$2~i {print $2}' /proc/mounts | tac)
    do
        su_run umount "$mp" || true
    done
}

spawn_root_chroot() {
    local IFS="$(printf '\n\t')"
    local userspec= path= setarch= env= ssh_sock_dir=
    local cmd= chroot_cmd= i=

    : ${root_dir:?}
    : ${container_user:?}
    : ${container_home:?}

    trap unmount_filesystems EXIT

    if [ "$container_user" = 'root' ]; then
        userspec="0:0"
        path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    else
        userspec="$USER:users"
        path="/usr/local/bin:/usr/bin:/bin"
    fi

    case $root_arch in
        x86|i?86)
            setarch="linux32" ;;
        x86-64|x86_64|amd64)
            setarch="linux64" ;;
    esac

    if [ "$share_system" ]; then
        su_run mkdir -p "$root_dir/sys"            || die
        su_run mount --rbind /sys "$root_dir/sys"  || die
        su_run mount --make-rslave "$root_dir/sys" || die
        su_run mkdir -p "$root_dir/dev"            || die
        su_run mount --rbind /dev "$root_dir/dev"  || die
        su_run mount --make-rslave "$root_dir/dev" || die
    fi

    if [ "$bind_home" ]; then
        su_run mount --bind "$bind_home" "$root_dir/$container_home"
    fi

    env="${env}${S}TERM=$TERM"
    env="${env}${S}HOME=$container_home"
    env="${env}${S}USER=$container_user"
    env="${env}${S}LOGNAME=$container_user"
    env="${env}${S}PATH=$path"

    if [ "$with_ssh_agent" ]; then
        env="${env}${S}SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
        ssh_sock_dir=$(dirname "$SSH_AUTH_SOCK")
        su_run mkdir -p "$root_dir/$ssh_sock_dir" || die
        su_run mount --bind "$ssh_sock_dir" "$root_dir/$ssh_sock_dir" || die
    fi

    if [ "$with_x11" ]; then
        env="${env}${S}DISPLAY=$DISPLAY"
        env="${env}${S}XAUTHORITY=$xauth_file"
        su_run mkdir -p "$root_dir/$xsock_dir" || die
        su_run mkdir -p "$root_dir/$(dirname $xauth_file)" || die
        su_run mount --bind "$xsock_dir" "$root_dir/$xsock_dir" || die
        su_run cp -a --parents "$xauth_file" "$root_dir" || die
    fi

    if [ "$with_pulseaudio" ]; then
        [ "$pulseaudio_server_dir" ] || die
        [ -d "$pulseaudio_server_dir" ] || die
        env="${env}${S}PULSE_SERVER=$pulseaudio_dir/native"
        su_run mkdir -p "$root_dir/$pulseaudio_dir" || die
        su_run mount --bind "$pulseaudio_server_dir" "$root_dir/$pulseaudio_dir" || die
    fi

    if [ "$container_command" ]; then
        for i in $container_command; do
            cmd="$cmd '$i'"
        done
    else
        cmd="/bin/bash -l"
    fi

    chroot_cmd="mount -t proc proc $root_dir/proc &&"
    chroot_cmd="${chroot_cmd} chroot --userspec=$userspec"
    chroot_cmd="${chroot_cmd} ${root_dir}"
    chroot_cmd="${chroot_cmd} ${cmd}"

    su_run $setarch env - $env unshare -pf sh -c $chroot_cmd
}

spawn_root_docker() {
    local IFS="$(printf '\n\t')"
    local args=

    : ${container_name:?}
    : ${container_user:?}

    args="--user=$container_user"

    if [ "$bind_home" ]; then
        args="${args}${S}--volume=$bind_home:$container_home"
    fi

    if [ "$with_ssh_agent" ]; then
        args="${args}${S}--env=SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
        args="${args}${S}--volume=$SSH_AUTH_SOCK:$SSH_AUTH_SOCK"
    fi

    if [ "$with_x11" ]; then
        args="${args}${S}--env=DISPLAY=$DISPLAY"
        args="${args}${S}--env=XAUTHORITY=$xauth_file"
        # disable Qt's usage of shared memory which we do not expose
        args="${args}${S}--env=QT_X11_NO_MITSHM=1"
        args="${args}${S}--volume=$xauth_file:$xauth_file"
        args="${args}${S}--volume=$xsock_dir:$xsock_dir"
    fi

    docker run --rm -it \
        ${share_system:+--privileged} \
        $args $additional_args $container_name \
        $container_command
}

if [ $# = 0 ]; then
    show_usage
    exit
fi

load_config

parse_command_line "$@"

check_arguments

if [ "$umount_only" ]; then
    unmount_filesystems
    exit
fi

set_container_home

[ -d "$temp_dir" ] || mkdir -p "$temp_dir"

if [ "$with_x11" ]; then
    extract_xauth
    [ -f "$xauth_file" ] || die "no X authority file"
    [ -d "$xsock_dir"  ] || die "no X socket directory"
fi

if [ "$container_name" ]; then
    spawn_root_docker
elif [ "$root_dir" ]; then
    spawn_root_chroot
else
    die "container name or chroot directory is not specified"
fi
